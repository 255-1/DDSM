import tensorflow as tf

def conv2d(x,W,s):
    return tf.nn.conv2d(x,W,strides=[1,s,s,1],padding='VALID')
def conv2d_P(x,W,s):
    return tf.nn.conv2d(x,W,strides=[1,s,s,1],padding='SAME')
def max_pooling2x2(x):
    return tf.nn.max_pool(x,ksize=[1,3,3,1],strides=[1,2,2,1],padding='VALID')
def model(x,keep_prob):
    w_conv1 = tf.Variable(tf.zeros([3,3,3,64]),dtype=tf.float32,name='w_1')
    b_conv1 = tf.Variable(tf.zeros([64]),dtype=tf.float32,name='b_1')
    conv1 = tf.nn.relu(conv2d_P(x,w_conv1,1)+b_conv1)
    pool_1 = max_pooling2x2(conv1)
    w_conv2 = tf.Variable(tf.zeros([3,3,64,128]),dtype=tf.float32,name='w_2')
    b_conv2 = tf.Variable(tf.zeros([128]),dtype=tf.float32,name='b_2')
    conv2 = tf.nn.relu(conv2d_P(pool_1, w_conv2, 1) + b_conv2)
    pool_2 = max_pooling2x2(conv2)
    w_conv3 = tf.Variable(tf.zeros([3,3,128,256]),dtype=tf.float32,name='w_3')
    b_conv3 = tf.Variable(tf.zeros([256]),dtype=tf.float32,name='b_3')
    conv3 = tf.nn.relu(conv2d_P(pool_2, w_conv3, 1) + b_conv3)
    w_conv4 = tf.Variable(tf.zeros([3,3,256,256]),dtype=tf.float32,name='w_4')
    b_conv4 = tf.Variable(tf.zeros([256]), dtype=tf.float32, name='b_4')
    conv4 = tf.nn.relu(conv2d_P(conv3, w_conv4, 1) + b_conv4)
    pool_3 = max_pooling2x2(conv4)
    w_conv5 = tf.Variable(tf.zeros([3, 3, 256, 512]), dtype=tf.float32, name='w_5')
    b_conv5 = tf.Variable(tf.zeros([512]), dtype=tf.float32, name='b_5')
    conv5 = tf.nn.relu(conv2d_P(pool_3, w_conv5, 1) + b_conv5)
    w_conv6 = tf.Variable(tf.zeros([3, 3, 512, 512]), dtype=tf.float32, name='w_6')
    b_conv6 = tf.Variable(tf.zeros([512]), dtype=tf.float32, name='b_6')
    conv6 = tf.nn.relu(conv2d_P(conv5, w_conv6, 1) + b_conv6)
    pool_4 = max_pooling2x2(conv6)
    w_conv7 = tf.Variable(tf.zeros([3, 3, 512, 512]), dtype=tf.float32, name='w_7')
    b_conv7 = tf.Variable(tf.zeros([512]), dtype=tf.float32, name='b_7')
    conv7 = tf.nn.relu(conv2d_P(pool_4, w_conv7, 1) + b_conv7)
    w_conv8 = tf.Variable(tf.zeros([3, 3, 512, 512]), dtype=tf.float32, name='w_8')
    b_conv8 = tf.Variable(tf.zeros([512]), dtype=tf.float32, name='b_8')
    conv8 = tf.nn.relu(conv2d_P(conv7, w_conv8, 1) + b_conv8)
    pool_5 = max_pooling2x2(conv8)
    w_conv9 = tf.Variable(tf.zeros([3*3*512,4096]),dtype=tf.float32,name='w_9')
    b_conv9 = tf.Variable(tf.zeros([4096]),dtype=tf.float32,name='b_9')
    pool5_flat = tf.reshape(pool_5, [-1, 3 * 3 * 512])
    fc1 = tf.nn.relu(tf.matmul(pool5_flat, w_conv9) + b_conv9)
    fc1_drop = tf.nn.dropout(fc1, keep_prob)
    w_conv10 = tf.Variable(tf.zeros([4096,4096]),dtype=tf.float32,name='w_10')
    b_conv10 = tf.Variable(tf.zeros([4096]),dtype=tf.float32,name='b_10')
    fc2 = tf.nn.relu(tf.matmul(fc1_drop, w_conv10) + b_conv10)
    fc2_drop = tf.nn.dropout(fc2, keep_prob)
    w_conv11 = tf.Variable(tf.zeros([4096, 2]), dtype=tf.float32, name='w_11')
    b_conv11 = tf.Variable(tf.zeros([2]), dtype=tf.float32, name='b_11')
    y_pre = tf.nn.softmax(tf.matmul(fc2_drop, w_conv11) + b_conv11)
    return y_pre
